buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // shodow jarによるbuild
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'com.github.spotbugs' version '4.6.0'
    id 'jacoco'
}

apply plugin: 'com.github.johnrengelman.shadow'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

group = 'covid.fukui.vaccine'
version = '1.0.0'
sourceCompatibility = '11'
targetCompatibility = '11'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

configurations {
    invoker
}

dependencies {
    implementation(
            // webflux
            'org.springframework.boot:spring-boot-starter-webflux',
            // google cloud function for spring boot
            'org.springframework.cloud:spring-cloud-function-adapter-gcp:3.1.2',
            // commons-lang3
            'org.apache.commons:commons-lang3:3.11',
            // com.squareup.okhttp3
            "com.squareup.okhttp3:okhttp:4.9.0",
            // google cloud function for test
            'com.google.cloud.functions:functions-framework-api:1.0.1',
            // spring-cloud-gcp-starter-logging
            'org.springframework.cloud:spring-cloud-gcp-starter-logging:+',
            // firestore
            'org.springframework.cloud:spring-cloud-gcp-starter-data-firestore:+'
    )

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // google cloud function for test
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.0.0-alpha-2-rc5'

    testImplementation(
            // spring boot test framework
            'org.springframework.boot:spring-boot-starter-test',
            // test library for webflux
            'io.projectreactor:reactor-test',
            // spock
            'org.spockframework:spock-core:1.3-groovy-2.5',
            // spock for spring boot
            'org.spockframework:spock-spring:1.3-groovy-2.5',
            // library for spock
            'cglib:cglib-nodep:3.3.0',
            // mock for webflux
            'com.squareup.okhttp3:mockwebserver:4.9.0'
    )

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.1'
}

// bootRun タスクの設定を追加する
bootRun {
    // プロファイルを指定する
    jvmArgs = ['-Dspring.profiles.active=local']
}

test {
    testLogging {
        // テスト時の標準出力と標準エラー出力を表示する
        showStandardStreams true
        // イベントを出力する (TestLogEvent)
        events 'started', 'skipped', 'passed', 'failed'
    }
}

// functionのローカル実行
tasks.register("function", JavaExec) {
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
    args(
            '--target', 'org.springframework.cloud.function.adapter.gcp.GcfJarLauncher',
            '--port', project.findProperty('function.port') ?: 8080
    )
    doFirst {
        args(
                '--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath
        )
    }
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
    excludeFilter = file('./config/spotbugs_filter.xml')
}

spotbugsTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugsTest.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
    excludeFilter = file('./config/spotbugs_filter.xml')
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: [
                            '**/*Application.class',
                            '**/*Exception.class',
                            '**/config/**',
                            '**/*Sandbox*.class'
                    ]
            )
        }))
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer

// fat jarを作成する
// https://github.com/spring-projects/spring-boot/issues/1828
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'covid.fukui.vaccine.ciofeeder.CioFeederApplication'
    }
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}
